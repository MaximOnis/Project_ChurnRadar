import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from analyse import get_type_of_service, get_extented_type_of_service, client_info, advanced_internet, monthly_charges, month_type_payment, total_use_and_pay, contract_info, churn_and_inflow
from classification import train_churn_model

model, feature_importances_fig, label_encoders, acc_score = train_churn_model()

st.title("üìä –ê–Ω–∞–ª—ñ–∑ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–∞–Ω—ñ—ó")

# –ú–µ–Ω—é
menu = st.sidebar.radio(
    "üîç –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –∞–Ω–∞–ª—ñ–∑—É:",
    (
        "üìä –î–∞–Ω—ñ –ø—Ä–æ –ø—Ä–∏—Ç—ñ–∫ —Ç–∞ –≤—ñ–¥—Ç—ñ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤",
        "üì° –†–æ–∑–ø–æ–¥—ñ–ª —Ç–∏–ø—É —Å–µ—Ä–≤—ñ—Å—É",
        "üîç –î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤",
        "üë• –î–∞–Ω—ñ –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤",
        "üìÉ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏",
        "üåê –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ—Å–ª—É–≥",
        "üíµ –†–æ–∑–ø–æ–¥—ñ–ª –º—ñ—Å—è—á–Ω–æ—ó –æ–ø–ª–∞—Ç–∏",
        "üìà –û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤",
        "üìÖ –†–æ–∑–ø–æ–¥—ñ–ª —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —ñ —Å—É–º–∏ –æ–ø–ª–∞—Ç–∏",
        "üß† –í–∞–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–∫ (ML)"
    )
)

# 1. –í—ñ–¥—Ç—ñ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
if menu == "üìä –î–∞–Ω—ñ –ø—Ä–æ –ø—Ä–∏—Ç—ñ–∫ —Ç–∞ –≤—ñ–¥—Ç—ñ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤":
    fig = churn_and_inflow()
    st.pyplot(fig)

# 2. –¢–∏–ø —Å–µ—Ä–≤—ñ—Å—É(–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç/–¢–µ–ª–µ—Ñ–æ–Ω)
elif menu == "üì° –†–æ–∑–ø–æ–¥—ñ–ª —Ç–∏–ø—É —Å–µ—Ä–≤—ñ—Å—É":
    fig = get_type_of_service()
    st.pyplot(fig)

# 3. –î–µ—Ç–∞–ª—å–Ω—ñ—à–∞ —ñ–Ω—Ñ–∞ –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å–∏
elif menu == "üîç –î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤":
    fig = get_extented_type_of_service()
    st.pyplot(fig)

# 4. –î–∞–Ω—ñ –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤
elif menu == "üë• –î–∞–Ω—ñ –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤":
    fig = client_info()
    st.pyplot(fig)

# 5. –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–∞ –ø—Ä–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–µ—Ä–≤—ñ—Å–∏
elif menu == "üåê –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ—Å–ª—É–≥":
    fig = advanced_internet()
    st.pyplot(fig)

# 6. –ú—ñ—Å—è—á–Ω–∞ –æ–ø–ª–∞—Ç–∞
elif menu == "üíµ –†–æ–∑–ø–æ–¥—ñ–ª –º—ñ—Å—è—á–Ω–æ—ó –æ–ø–ª–∞—Ç–∏":
    fig = monthly_charges()
    st.pyplot(fig)

# 7. –ú—ñ—Å—è—á–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
elif menu == "üìà –û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤":
    fig = month_type_payment()
    st.pyplot(fig)

# 8. –í—Å—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —ñ –æ–ø–ª–∞—Ç–∞
elif menu == "üìÖ –†–æ–∑–ø–æ–¥—ñ–ª —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —ñ —Å—É–º–∏ –æ–ø–ª–∞—Ç–∏":
    fig = total_use_and_pay()
    st.pyplot(fig)
    
# 9. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏
elif menu == "üìÉ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏":
    fig = contract_info()
    st.pyplot(fig)

# 10. –ì—Ä–∞—Ñ—ñ–∫ –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –æ–∑–Ω–∞–∫
elif menu == "üß† –í–∞–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–∫ (ML)":
    st.pyplot(feature_importances_fig)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

st.sidebar.markdown("---")
predict_mode = st.sidebar.checkbox("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏ –≤—ñ–¥—Ç—ñ–∫ –∫–ª—ñ—î–Ω—Ç–∞")

if predict_mode:
    st.header("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç–∞")
    st.markdown(f'–¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ: {acc_score:.4f}')

    # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    st.subheader("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:")

    gender = st.radio("–°—Ç–∞—Ç—å", ['Male', 'Female'])
    senior = st.radio("–ü–µ–Ω—Å—ñ–æ–Ω–µ—Ä(1 - —Ç–∞–∫/ 0 - –Ω—ñ)", [0, 1])
    partner = st.radio("–Ñ –ø–∞—Ä—Ç–Ω–µ—Ä", ['Yes', 'No'])
    dependents = st.radio("–Ñ —É—Ç—Ä–∏–º–∞–Ω—Ü—ñ", ['Yes', 'No'])
    tenure = st.slider("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è (–º—ñ—Å—è—Ü—ñ–≤)", 0, 72, 12)
    phone = st.radio("–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π —Å–µ—Ä–≤—ñ—Å", ['Yes', 'No'])
    if phone == 'No':
        multi = 'No phone service'
    else:
        multi = st.radio("–î–µ–∫—ñ–ª—å–∫–∞ –ª—ñ–Ω—ñ–π", ['Yes', 'No'])
    internet = st.radio("–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–µ—Ä–≤—ñ—Å", ['DSL', 'Fiber optic', 'No'])
    
    if internet == 'No':
        security = 'No internet service'
        backup = 'No internet service'
        device = 'No internet service'
        tech = 'No internet service'
        tv = 'No internet service'
        movies = 'No internet service'
        st.markdown("‚ÑπÔ∏è –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–µ—Ä–≤—ñ—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫ 'No internet service'.")
    else:
        security = st.radio("–ó–∞—Ö–∏—Å—Ç –≤ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ", ['Yes', 'No'])
        backup = st.radio("–û–Ω–ª–∞–π–Ω —Ä–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è", ['Yes', 'No'])
        device = st.radio("–ó–∞—Ö–∏—Å—Ç –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤", ['Yes', 'No'])
        tech = st.radio("–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞", ['Yes', 'No'])
        tv = st.radio("–°—Ç—Ä—ñ–º—ñ–Ω–≥–æ–≤–µ –¢–í", ['Yes', 'No'])
        movies = st.radio("–°—Ç—Ä—ñ–º—ñ–Ω–≥–æ–≤—ñ —Ñ—ñ–ª—å–º–∏", ['Yes', 'No'])

    contract = st.radio("–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É", ['Month-to-month', 'One year', 'Two year'])
    paperless = st.radio("–ë–µ–∑–ø–∞–ø–µ—Ä–æ–≤–∞ –æ–ø–ª–∞—Ç–∞", ['Yes', 'No'])
    payment = st.radio("–¢–∏–ø –æ–ø–ª–∞—Ç–∏", ["Electronic check", "Mailed check", "Bank transfer (automatic)", "Credit card (automatic)"])
    monthly = st.slider("–ú—ñ—Å—è—á–Ω–∞ –æ–ø–ª–∞—Ç–∞", 0.0, 150.0, 70.0)
    total = st.slider("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", 0.0, 9000.0, 2000.0)

    # –ü–æ–±—É–¥–æ–≤–∞ DataFrame
    input_dict = {
        'gender': gender,
        'SeniorCitizen': senior,
        'Partner': partner,
        'Dependents': dependents,
        'tenure': tenure,
        'PhoneService': phone,
        'MultipleLines': multi,
        'InternetService': internet,
        'OnlineSecurity': security,
        'OnlineBackup': backup,
        'DeviceProtection': device,
        'TechSupport': tech,
        'StreamingTV': tv,
        'StreamingMovies': movies,
        'Contract': contract,
        'PaperlessBilling': paperless,
        'PaymentMethod': payment,
        'MonthlyCharges': monthly,
        'TotalCharges': total
    }

    input_df = pd.DataFrame([input_dict])

    # –ö–æ–¥—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
    for col in input_df.columns:
        if col in label_encoders:
            input_df[col] = label_encoders[col].transform(input_df[col])

    # –ü—Ä–æ–≥–Ω–æ–∑
    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]

    if prediction == 1:
        st.error(f"‚ö†Ô∏è –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É: {probability:.2%}")
    else:
        st.success(f"‚úÖ –ö–ª—ñ—î–Ω—Ç –π–º–æ–≤—ñ—Ä–Ω–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è. –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É: {probability:.2%}")


